{"version":3,"sources":["Suspects/const.js","Suspects/Suspects.jsx","App.js","index.js"],"names":["contacts","name","phone","age","city","info","password","Suspects","flipped","setFlipped","useState","Array","fill","isModalOpen","setIsModalOpen","passwordInput","setPasswordInput","currentIndex","setCurrentIndex","errorMessage","setErrorMessage","closeModal","_jsxs","_Fragment","children","_jsx","className","map","contact","index","onClick","handleFlip","Modal","isOpen","onRequestClose","contentLabel","overlayClassName","type","value","onChange","e","target","placeholder","handlePasswordSubmit","flip","i","App","Container","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.5dc59015.chunk.js","sourcesContent":["export const contacts = [\n\t{ name: 'John Doe', phone: '+1 555 123-4567', age: 35, city: 'New York', info: 'John is a software engineer.', password: 'john123' },\n\t{ name: 'Jane Smith', phone: '+1 555 234-5678', age: 28, city: 'Los Angeles', info: 'Jane loves surfing.', password: 'jane123' },\n\t{ name: 'Samuel Johnson', phone: '+1 555 345-6789', age: 42, city: 'Chicago', info: 'Samuel is a professional chef.', password: 'samuel123' },\n\t{ name: 'Emily Brown', phone: '+1 555 456-7890', age: 23, city: 'San Francisco', info: 'Emily is a graphic designer.', password: 'emily123' },\n\t{ name: 'Michael Davis', phone: '+1 555 567-8901', age: 37, city: 'Seattle', info: 'Michael enjoys hiking in the mountains.', password: 'michael123' },\n\t{ name: 'Jessica White', phone: '+1 555 678-9012', age: 31, city: 'Austin', info: 'Jessica is a yoga instructor.', password: 'jessica123' },\n\t{ name: 'Chris Miller', phone: '+1 555 789-0123', age: 29, city: 'Boston', info: 'Chris is a freelance writer.', password: 'chris123' },\n\t{ name: 'Amanda Wilson', phone: '+1 555 890-1234', age: 24, city: 'Miami', info: 'Amanda is a photographer.', password: 'amanda123' },\n\t{ name: 'David Taylor', phone: '+1 555 901-2345', age: 40, city: 'Denver', info: 'David is an entrepreneur.', password: 'david123' },\n\t{ name: 'Olivia Harris', phone: '+1 555 012-3456', age: 26, city: 'Houston', info: 'Olivia works as a travel blogger.', password: 'olivia123' },\n\t{ name: 'William Martin', phone: '+1 555 123-5678', age: 39, city: 'Phoenix', info: 'William is an architect.', password: 'william123' },\n\t{ name: 'Sophia Thompson', phone: '+1 555 234-6789', age: 34, city: 'Philadelphia', info: 'Sophia is a doctor.', password: 'sophia123' },\n\t{ name: 'James Anderson', phone: '+1 555 345-7890', age: 36, city: 'Dallas', info: 'James is a pilot.', password: 'james123' },\n\t{ name: 'Charlotte Martinez', phone: '+1 555 456-8901', age: 22, city: 'Las Vegas', info: 'Charlotte is a dancer.', password: 'charlotte123' },\n\t{ name: 'Robert Lee', phone: '+1 555 567-9012', age: 45, city: 'San Diego', info: 'Robert is a financial advisor.', password: 'robert123' },\n\t{ name: 'Mia Walker', phone: '+1 555 678-0123', age: 32, city: 'Orlando', info: 'Mia is a chef.', password: 'mia123' },\n\t{ name: 'Benjamin Young', phone: '+1 555 789-1234', age: 41, city: 'San Antonio', info: 'Benjamin is a musician.', password: 'benjamin123' },\n\t{ name: 'Isabella Scott', phone: '+1 555 890-2345', age: 27, city: 'Nashville', info: 'Isabella is an artist.', password: 'isabella123' },\n\t{ name: 'Lucas King', phone: '+1 555 901-3456', age: 30, city: 'Portland', info: 'Lucas is a barista.', password: 'lucas123' },\n\t{ name: 'Ella Baker', phone: '+1 555 012-4567', age: 38, city: 'Salt Lake City', info: 'Ella is an interior designer.', password: 'ella123' },\n\t{ name: 'John Doe', phone: '+1 555 123-4567', age: 35, city: 'New York', info: 'John is a software engineer.', password: 'john123' },\n\t{ name: 'Jane Smith', phone: '+1 555 234-5678', age: 28, city: 'Los Angeles', info: 'Jane loves surfing.', password: 'jane123' },\n\t{ name: 'Samuel Johnson', phone: '+1 555 345-6789', age: 42, city: 'Chicago', info: 'Samuel is a professional chef.', password: 'samuel123' },\n\t{ name: 'Emily Brown', phone: '+1 555 456-7890', age: 23, city: 'San Francisco', info: 'Emily is a graphic designer.', password: 'emily123' },\n\t{ name: 'Michael Davis', phone: '+1 555 567-8901', age: 37, city: 'Seattle', info: 'Michael enjoys hiking in the mountains.', password: 'michael123' },\n\t{ name: 'Jessica White', phone: '+1 555 678-9012', age: 31, city: 'Austin', info: 'Jessica is a yoga instructor.', password: 'jessica123' },\n\t{ name: 'Chris Miller', phone: '+1 555 789-0123', age: 29, city: 'Boston', info: 'Chris is a freelance writer.', password: 'chris123' },\n\t{ name: 'Amanda Wilson', phone: '+1 555 890-1234', age: 24, city: 'Miami', info: 'Amanda is a photographer.', password: 'amanda123' },\n\t{ name: 'David Taylor', phone: '+1 555 901-2345', age: 40, city: 'Denver', info: 'David is an entrepreneur.', password: 'david123' },\n\t{ name: 'Olivia Harris', phone: '+1 555 012-3456', age: 26, city: 'Houston', info: 'Olivia works as a travel blogger.', password: 'olivia123' },\n\t{ name: 'William Martin', phone: '+1 555 123-5678', age: 39, city: 'Phoenix', info: 'William is an architect.', password: 'william123' },\n\t{ name: 'Sophia Thompson', phone: '+1 555 234-6789', age: 34, city: 'Philadelphia', info: 'Sophia is a doctor.', password: 'sophia123' },\n\t{ name: 'James Anderson', phone: '+1 555 345-7890', age: 36, city: 'Dallas', info: 'James is a pilot.', password: 'james123' },\n\t{ name: 'Charlotte Martinez', phone: '+1 555 456-8901', age: 22, city: 'Las Vegas', info: 'Charlotte is a dancer.', password: 'charlotte123' },\n\t{ name: 'Robert Lee', phone: '+1 555 567-9012', age: 45, city: 'San Diego', info: 'Robert is a financial advisor.', password: 'robert123' },\n\t{ name: 'Mia Walker', phone: '+1 555 678-0123', age: 32, city: 'Orlando', info: 'Mia is a chef.', password: 'mia123' },\n\t{ name: 'Benjamin Young', phone: '+1 555 789-1234', age: 41, city: 'San Antonio', info: 'Benjamin is a musician.', password: 'benjamin123' },\n\t{ name: 'Isabella Scott', phone: '+1 555 890-2345', age: 27, city: 'Nashville', info: 'Isabella is an artist.', password: 'isabella123' },\n\t{ name: 'Lucas King', phone: '+1 555 901-3456', age: 30, city: 'Portland', info: 'Lucas is a barista.', password: 'lucas123' },\n\t{ name: 'Ella Baker', phone: '+1 555 012-4567', age: 38, city: 'Salt Lake City', info: 'Ella is an interior designer.', password: 'ella123' },\n\t{ name: 'John Doe', phone: '+1 555 123-4567', age: 35, city: 'New York', info: 'John is a software engineer.', password: 'john123' },\n\t{ name: 'Jane Smith', phone: '+1 555 234-5678', age: 28, city: 'Los Angeles', info: 'Jane loves surfing.', password: 'jane123' },\n\t{ name: 'Samuel Johnson', phone: '+1 555 345-6789', age: 42, city: 'Chicago', info: 'Samuel is a professional chef.', password: 'samuel123' },\n\t{ name: 'Emily Brown', phone: '+1 555 456-7890', age: 23, city: 'San Francisco', info: 'Emily is a graphic designer.', password: 'emily123' },\n\t{ name: 'Michael Davis', phone: '+1 555 567-8901', age: 37, city: 'Seattle', info: 'Michael enjoys hiking in the mountains.', password: 'michael123' },\n\t{ name: 'Jessica White', phone: '+1 555 678-9012', age: 31, city: 'Austin', info: 'Jessica is a yoga instructor.', password: 'jessica123' },\n\t{ name: 'Chris Miller', phone: '+1 555 789-0123', age: 29, city: 'Boston', info: 'Chris is a freelance writer.', password: 'chris123' },\n\t{ name: 'Amanda Wilson', phone: '+1 555 890-1234', age: 24, city: 'Miami', info: 'Amanda is a photographer.', password: 'amanda123' },\n\t{ name: 'David Taylor', phone: '+1 555 901-2345', age: 40, city: 'Denver', info: 'David is an entrepreneur.', password: 'david123' },\n\t{ name: 'Olivia Harris', phone: '+1 555 012-3456', age: 26, city: 'Houston', info: 'Olivia works as a travel blogger.', password: 'olivia123' },\n\t{ name: 'William Martin', phone: '+1 555 123-5678', age: 39, city: 'Phoenix', info: 'William is an architect.', password: 'william123' },\n\t{ name: 'Sophia Thompson', phone: '+1 555 234-6789', age: 34, city: 'Philadelphia', info: 'Sophia is a doctor.', password: 'sophia123' },\n\t{ name: 'James Anderson', phone: '+1 555 345-7890', age: 36, city: 'Dallas', info: 'James is a pilot.', password: 'james123' },\n\t{ name: 'Charlotte Martinez', phone: '+1 555 456-8901', age: 22, city: 'Las Vegas', info: 'Charlotte is a dancer.', password: 'charlotte123' },\n\t{ name: 'Robert Lee', phone: '+1 555 567-9012', age: 45, city: 'San Diego', info: 'Robert is a financial advisor.', password: 'robert123' },\n\t{ name: 'Mia Walker', phone: '+1 555 678-0123', age: 32, city: 'Orlando', info: 'Mia is a chef.', password: 'mia123' },\n\t{ name: 'Benjamin Young', phone: '+1 555 789-1234', age: 41, city: 'San Antonio', info: 'Benjamin is a musician.', password: 'benjamin123' },\n\t{ name: 'Isabella Scott', phone: '+1 555 890-2345', age: 27, city: 'Nashville', info: 'Isabella is an artist.', password: 'isabella123' },\n\t{ name: 'Lucas King', phone: '+1 555 901-3456', age: 30, city: 'Portland', info: 'Lucas is a barista.', password: 'lucas123' },\n\t{ name: 'Ella Baker', phone: '+1 555 012-4567', age: 38, city: 'Salt Lake City', info: 'Ella is an interior designer.', password: 'ella123' }\n];","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport './Suspects.css';\nimport { contacts } from \"./const\";\n\n\nconst Suspects = () => {\n  const [flipped, setFlipped] = useState(Array(20).fill(false));\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [passwordInput, setPasswordInput] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleFlip = (index) => {\n    setCurrentIndex(index);\n    setIsModalOpen(true);\n  };\n\n  const handlePasswordSubmit = () => {\n    if (passwordInput === contacts[currentIndex].password) {\n      setFlipped(flipped.map((flip, i) => (i === currentIndex ? !flip : flip)));\n      setIsModalOpen(false);\n      setPasswordInput('');\n      setErrorMessage('');\n    } else {\n      setErrorMessage('Неверный пароль!');\n    }\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setPasswordInput('');\n    setErrorMessage('');\n  };\n\n  return (\n   <>\n     <h1 className=\"title\">Suspects and Witnesses</h1>\n     <div className=\"contacts-list\">\n       {contacts.map((contact, index) => (\n        <div\n         className={`contact-card ${flipped[index] ? 'flipped' : ''}`}\n         key={index}\n         onClick={() => handleFlip(index)}\n        >\n          <div className=\"contact-card-front\">\n            <h3>{contact.name}</h3>\n            <p><strong>Phone:</strong> {contact.phone}</p>\n            <p><strong>Age:</strong> {contact.age}</p>\n            <p><strong>City:</strong> {contact.city}</p>\n          </div>\n          <div className=\"contact-card-back\">\n            <p>{contact.info}</p>\n          </div>\n        </div>\n       ))}\n     </div>\n\n     <Modal\n      isOpen={isModalOpen}\n      onRequestClose={closeModal}\n      contentLabel=\"Password Modal\"\n      className=\"modal\"\n      overlayClassName=\"modal-overlay\"\n     >\n       <h2>Введите пароль для доступа</h2>\n       <input\n        type=\"password\"\n        value={passwordInput}\n        onChange={(e) => setPasswordInput(e.target.value)}\n        placeholder=\"Введите пароль\"\n       />\n       {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n       <button onClick={handlePasswordSubmit}>Подтвердить</button>\n       <button onClick={closeModal}>Отмена</button>\n     </Modal>\n   </>\n);\n};\n\nexport default Suspects;","/** @format */\n\nimport Container from \"./components/Container\";\nimport Suspects from \"./Suspects/Suspects\";\n\n\nexport default function App() {\n\n  return (\n    <Container>\n       <Suspects/>\n    </Container>\n  );\n}\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n <React.StrictMode>\n   <App/>\n  <div>100000000000000000000000</div>\n </React.StrictMode>\n);\n"],"sourceRoot":""}